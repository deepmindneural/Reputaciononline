// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                   String   @id @default(cuid())
  email                String   @unique
  password             String
  name                 String?
  company              String?
  phone                String?
  bio                  String?
  avatarUrl            String?
  role                 String   @default("user")
  plan                 String   @default("free")
  credits              Int      @default(0)
  profileType          String?
  category             String?
  brandName            String?
  otherCategory        String?
  onboardingCompleted  Boolean  @default(false)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  lastLogin            DateTime?
  nextBillingDate      DateTime?

  // Relaciones
  socialMedia          SocialMedia[]
  mediaSources         UserMediaSource[]
  additionalSources    String?  // JSON string para fuentes adicionales
  userStats            UserStats?
  notifications        Notification[]
  alerts               Alert[]
  reports              Report[]
  activities           Activity[]

  @@map("users")
}

model SocialPlatform {
  id          String  @id @default(cuid())
  name        String  // 'Facebook', 'X', 'Instagram', etc.
  platform    String  @unique // 'facebook', 'x', 'instagram', 'threads', 'linkedin', 'youtube'
  isActive    Boolean @default(true)
  oauthConfig String? // OAuth configuration JSON as string for each platform
  
  @@map("social_platforms")
}

model SocialMedia {
  id           String  @id @default(cuid())
  userId       String
  platform     String  // 'facebook', 'x', 'instagram', 'threads', 'linkedin', 'youtube'
  username     String?
  profileUrl   String?
  followers    Int     @default(0)
  following    Int     @default(0)
  posts        Int     @default(0)
  engagement   Float   @default(0)
  connected    Boolean @default(false)
  lastSync     DateTime?
  
  // OAuth tokens for real API connections
  accessToken  String?
  refreshToken String?
  tokenExpiry  DateTime?
  
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, platform])
  @@map("social_media")
}

model UserStats {
  id                    String   @id @default(cuid())
  userId                String   @unique
  totalMentions         Int      @default(0)
  positiveMentions      Int      @default(0)
  negativeMentions      Int      @default(0)
  neutralMentions       Int      @default(0)
  sentimentScore        Float    @default(0)
  reachEstimate         Int      @default(0)
  engagementRate        Float    @default(0)
  influenceScore        Float    @default(0)
  trendingScore         Float    @default(0)
  monthlyGrowth         Float    @default(0)
  lastCalculated        DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_stats")
}

model Notification {
  id          String   @id @default(cuid())
  userId      String
  title       String
  message     String
  type        String   // 'mention', 'alert', 'report', 'system'
  isRead      Boolean  @default(false)
  priority    String   @default("normal") // 'low', 'normal', 'high', 'urgent'
  metadata    String?  // JSON string for additional data
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Alert {
  id          String   @id @default(cuid())
  userId      String
  name        String
  keywords    String   // JSON array of keywords
  platforms   String   // JSON array of platforms to monitor
  sentiment   String?  // 'positive', 'negative', 'neutral', null for all
  isActive    Boolean  @default(true)
  frequency   String   @default("realtime") // 'realtime', 'hourly', 'daily', 'weekly'
  lastTriggered DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("alerts")
}

model Report {
  id          String   @id @default(cuid())
  userId      String
  name        String
  type        String   // 'daily', 'weekly', 'monthly', 'custom'
  dateRange   String   // JSON object with start/end dates
  data        String   // JSON string with report data
  status      String   @default("generated") // 'generating', 'generated', 'failed'
  fileUrl     String?
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reports")
}

model Activity {
  id          String   @id @default(cuid())
  userId      String
  action      String   // 'login', 'report_generated', 'alert_created', etc.
  description String
  metadata    String?  // JSON string for additional context
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("activities")
}

model MediaSource {
  id          String  @id @default(cuid())
  name        String
  url         String  @unique
  category    String  // 'nacional', 'regional', 'internacional', 'especializado'
  description String?
  logoUrl     String?
  isActive    Boolean @default(true)
  isDefault   Boolean @default(false) // Medios que vienen por defecto
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  userSelections UserMediaSource[]

  @@map("media_sources")
}

model UserMediaSource {
  id           String @id @default(cuid())
  userId       String
  mediaSourceId String
  isSelected   Boolean @default(false)
  addedAt      DateTime @default(now())

  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  mediaSource  MediaSource @relation(fields: [mediaSourceId], references: [id], onDelete: Cascade)

  @@unique([userId, mediaSourceId])
  @@map("user_media_sources")
}

model MonitoringSource {
  id          String  @id @default(cuid())
  name        String
  url         String  @unique
  category    String  // 'nacional', 'regional', 'internacional', 'especializado'
  description String?
  logoUrl     String?
  isActive    Boolean @default(true)
  isDefault   Boolean @default(false) // Fuentes que vienen por defecto
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("monitoring_sources")
}
