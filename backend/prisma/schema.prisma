// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// Configuración de la base de datos - SQLite para desarrollo, fácilmente migrable a MySQL
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

// Modelo para transacciones de créditos
model CreditTransaction {
  id             String   @id @default(uuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount         Int      // Cantidad de créditos (positivo para compras, negativo para gastos)
  type           String   // 'purchase', 'spend', 'refund', 'bonus'
  description    String   // Descripción de la transacción
  paymentMethod  String?  // Método de pago si aplica: 'credit_card', 'paypal', etc.
  paymentReference String? // Referencia externa del pago si aplica
  status         String   @default("completed") // 'completed', 'pending', 'failed'
  price          Int?     // Precio en centavos si es una compra
  createdAt      DateTime @default(now())
  metadata       Json?    // Datos adicionales como detalles del plan
}

// Modelo de Usuario
model User {
  id                String                 @id @default(uuid())
  email             String                 @unique
  password          String
  name              String
  role              String                 @default("user") // user, admin, agencia
  credits           Int                    @default(0)
  active            Boolean                @default(true)
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  profileInfo       UserProfile?
  mentions          Mention[]
  agencyProfile     AgencyProfile?         @relation(fields: [agencyProfileId], references: [id])
  agencyProfileId   String?                @unique
  campaigns         Campaign[]
  alertSettings     AlertSetting[]
  notifications     Notification[]
  agencyClients     AgencyClient[]         @relation("AgencyToClient")
  agencyManagers    AgencyClient[]         @relation("ClientToAgency")
  socialAccounts    SocialNetworkAccount[] // Relaciu00f3n con cuentas de redes sociales
  accounts          Account[]               // Relaciu00f3n con cuentas NextAuth
  sessions          Session[]               // Relaciu00f3n con sesiones NextAuth
  creditTransactions CreditTransaction[]    // Relaciu00f3n con transacciones de cru00e9ditos
}

// Información de perfil de usuario
model UserProfile {
  id               String   @id @default(uuid())
  userId           String   @unique
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  biography        String?
  avatar           String?
  politicalParty   String?
  position         String?
  region           String?
  socialNetworks   Json?    // JSON con enlaces a redes sociales
  preferences      Json?    // Preferencias de la app
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

// Modelo para menciones y análisis
model Mention {
  id            String   @id @default(uuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  platform      String   // Twitter, Facebook, Instagram, etc.
  content       String
  author        String?
  url           String?
  sentiment     String?  // positive, negative, neutral
  relevance     Int?     // 1-100
  published     DateTime
  retrieved     DateTime @default(now())
  region        String?
  topic         String?
  engagementData Json?   // likes, shares, comments
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// Modelo para Campañas
model Campaign {
  id            String   @id @default(uuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name          String
  description   String?
  startDate     DateTime
  endDate       DateTime?
  status        String   @default("active") // active, paused, completed
  budget        Float?
  objectives    Json?    // JSON con objetivos de la campaña
  keyMetrics    Json?    // JSON con métricas principales
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// Modelo para Configuración de Alertas
model AlertSetting {
  id             String   @id @default(uuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name           String
  description    String?
  conditions     Json     // JSON con condiciones para las alertas
  channels       Json     // JSON con canales para notificación (email, app, etc.)
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

// Modelo para Notificaciones
model Notification {
  id             String   @id @default(uuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title          String
  message        String
  type           String   // alert, system, info
  isRead         Boolean  @default(false)
  relatedData    Json?    // JSON con datos relacionados
  createdAt      DateTime @default(now())
  expiresAt      DateTime?
}

// Modelo para cuentas de redes sociales (tokens)
model SocialNetworkAccount {
  id            String   @id @default(uuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  platform      String   // facebook, twitter, instagram, linkedin, tiktok
  accessToken   String   @db.Text
  refreshToken  String?  @db.Text
  tokenExpires  DateTime?
  providerAccountId String
  username      String?
  profileUrl    String?
  lastFetched   DateTime?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@unique([userId, platform])
}

// Modelos NextAuth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Perfil de Agencia
model AgencyProfile {
  id                String         @id @default(uuid())
  user              User?
  name              String
  description       String?
  logo              String?
  address           String?
  phone             String?
  website           String?
  commissionRate    Float          @default(10.0) // Porcentaje de comisión
  balanceAmount     Float          @default(0.0)  // Saldo disponible para retiro
  subscriptionActive Boolean        @default(false) // Estado de suscripción activa
  subscriptionPlan  String?        // Nombre del plan contratado
  subscriptionEndDate DateTime?    // Fecha de finalización de la suscripción
  lastBillingDate   DateTime?      // Última fecha de facturación
  clients           AgencyClient[] // Relación con clientes
  withdrawals       Withdrawal[]
  salesTransactions SaleTransaction[]
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

// Relación Agencia-Cliente
model AgencyClient {
  id              String        @id @default(uuid())
  agencyId        String
  agency          User          @relation("AgencyToClient", fields: [agencyId], references: [id])
  clientId        String
  client          User          @relation("ClientToAgency", fields: [clientId], references: [id])
  agencyProfile   AgencyProfile @relation(fields: [agencyProfileId], references: [id])
  agencyProfileId String
  status          String        @default("active") // active, inactive, pending
  commissionRate  Float?        // Tasa específica para este cliente, si es diferente
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@unique([agencyId, clientId])
}

// Transacciones de venta
model SaleTransaction {
  id              String        @id @default(uuid())
  agencyProfileId String
  agencyProfile   AgencyProfile @relation(fields: [agencyProfileId], references: [id])
  clientName      String
  clientEmail     String
  planName        String
  planPrice       Float
  commissionAmount Float
  status          String        @default("pending") // pending, completed, refunded
  paymentMethod   String?
  paymentDetails  Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

// Retiros de comisiones
model Withdrawal {
  id              String        @id @default(uuid())
  agencyProfileId String
  agencyProfile   AgencyProfile @relation(fields: [agencyProfileId], references: [id])
  amount          Float
  status          String        @default("pending") // pending, processed, rejected
  paymentMethod   String
  paymentDetails  Json?
  notes           String?
  processedAt     DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

// Modelo para Revisiones de Hospedaje (Airbnb, Booking, TripAdvisor)
model HospitalityReview {
  id              String   @id @default(uuid())
  propertyId      String
  property        HospitalityProperty @relation(fields: [propertyId], references: [id])
  platform        String   // airbnb, booking, tripadvisor
  author          String
  content         String
  rating          Float    // 1-5
  date            DateTime
  responseContent String?
  responseDate    DateTime?
  sentiment       String?  // positive, neutral, negative
  tags            Json?    // Etiquetas asociadas a la revisión
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// Modelo para Propiedades de Hospedaje
model HospitalityProperty {
  id              String   @id @default(uuid())
  userId          String?  // Opcional, para vincular con un usuario
  name            String
  description     String?
  externalId      String?  // ID en la plataforma externa
  platform        String   // airbnb, booking, tripadvisor
  address         String?
  propertyType    String?  // hotel, apartment, house, room
  averageRating   Float?
  totalReviews    Int      @default(0)
  imageUrl        String?
  originalUrl     String?
  active          Boolean  @default(true)
  reviews         HospitalityReview[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// Modelo para datos políticos de Colombia
model PoliticalData {
  id               String   @id @default(uuid())
  entityType       String   // candidate, party, institution
  name             String
  position         String?
  party            String?
  region           String?
  department       String?
  municipality     String?
  electionPeriod   String?
  votes            Int?
  votingPercentage Float?
  popularity       Float?   // Basado en análisis de sentimiento
  imageUrl         String?
  bio              String?
  additionalData   Json?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}
